#BlueJ class context
comment0.params=
comment0.target=Picture()
comment0.text=\r\n\ Constructor\ that\ takes\ no\ arguments\r\n
comment1.params=fileName
comment1.target=Picture(java.lang.String)
comment1.text=\r\n\ Constructor\ that\ takes\ a\ file\ name\ and\ creates\ the\ picture\r\n\ @param\ fileName\ the\ name\ of\ the\ file\ to\ create\ the\ picture\ from\r\n
comment10.params=file\ amt
comment10.target=void\ copysmaller(Picture,\ int)
comment10.text=\r\n\ Makes\ the\ image\ smaller\ based\ on\ a\ multiplier\ (2\ will\ make\ the\ image\ half\ the\ size)\r\n
comment11.params=file\ amt
comment11.target=void\ copyrecursive(Picture,\ int)
comment11.text=\r\n\ Copies\ the\ image\ onto\ itself\ but\ smaller\ until\ it\ gets\ to\ 6\ smaller\ images,\ also\ changes\ the\ rgb\ \r\n\ values\ based\ on\ the\ image\ before\ it.\r\n
comment12.params=
comment12.target=void\ shepar()
comment12.text=\r\n\ Posterization\ method,\ Groups\ the\ RGB\ values\ into\ 4\ groups\ and\ sets\ the\r\n\ new\ RGB\ values\ accordingly\r\n
comment13.params=
comment13.target=void\ negative()
comment13.text=\r\n\ Sets\ the\ RGB\ values\ to\ the\ inverse\r\n
comment14.params=
comment14.target=void\ mirrorneg()
comment14.text=\r\n\ Mirrors\ the\ image\ horizontally\ while\ switching\ RGB\ values\ then\ mirrors\ verticall\r\n
comment15.params=file\ x\ y
comment15.target=void\ copy(Picture,\ int,\ int)
comment15.text=\r\n{\r\n\ \ \ \ int\ width\ \=\ this.getWidth();\r\n\ \ \ \ width\ \=\ (width\ /\ 2)\ +\ 195;\r\n\ \ \ \ int\ mirrorPoint\ \=\ (width\ /\ 2)\ ;\r\n\ \ \ \ \r\n\ \ \ \ Pixel\ leftPixel\ \=\ null;\r\n\ \ \ \ Pixel\ rightPixel\ \=\ null;\r\n\ \ \ \ \r\n\ \ \ \ //loop\ through\ all\ the\ rows\r\n\ \ \ \ //Starts\ from\ (0,0)\ and\ copies\ the\ point\ to\ the\ other\ tside\r\n\ \ \ \ for\ (int\ y\ \=\ 0\ ;\ y\ <\ getHeight();\ y++)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ for\ (\ int\ x\ \=\ 195\ ;\ x\ <\ mirrorPoint\ ;\ x++)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ leftPixel\ \=\ getPixel(x,y);\r\n\ \ \ \ \ \ \ \ \ \ \ \ rightPixel\ \=\ getPixel(width\ -\ 1\ -x,\ y);\r\n\ \ \ \ \ \ \ \ \ \ \ \ rightPixel.setColor(leftPixel.getColor());\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\ \ \ \r\n}\r\n
comment2.params=width\ height
comment2.target=Picture(int,\ int)
comment2.text=\r\n\ Constructor\ that\ takes\ the\ width\ and\ height\r\n\ @param\ width\ the\ width\ of\ the\ desired\ picture\r\n\ @param\ height\ the\ height\ of\ the\ desired\ picture\r\n
comment3.params=copyPicture
comment3.target=Picture(Picture)
comment3.text=\r\n\ Constructor\ that\ takes\ a\ picture\ and\ creates\ a\r\n\ copy\ of\ that\ picture\r\n
comment4.params=image
comment4.target=Picture(java.awt.image.BufferedImage)
comment4.text=\r\n\ Constructor\ that\ takes\ a\ buffered\ image\r\n\ @param\ image\ the\ buffered\ image\ to\ use\r\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\r\n\ Method\ to\ return\ a\ string\ with\ information\ about\ this\ picture.\r\n\ @return\ a\ string\ with\ information\ about\ the\ picture\ such\ as\ fileName,\r\n\ height\ and\ width.\r\n
comment6.params=args
comment6.target=void\ main(java.lang.String[])
comment7.params=
comment7.target=void\ gray()
comment7.text=\r\n\ Takes\ the\ average\ RGB\ values\ of\ the\ image\ in\ order\ to\ create\ varying\ intensities\ of\ only\ gray.\r\n\ \r\n
comment8.params=
comment8.target=void\ mirrorVertical()
comment8.text=\r\n\ Method\ to\ mirror\ aroudn\ a\ vertical\ line\ in\ the\ middle\ of\ the\ pic\r\n
comment9.params=
comment9.target=void\ mirrorHorizontal()
comment9.text=\r\n\ Method\ to\ mirror\ around\ a\ horizontal\ line\ in\ the\ middle\r\n\ based\ on\ the\ height.\ It\ copies\ the\ top\ mirrored\ to\ the\r\n\ bottom\r\n
numComments=16
